Script ::= Stmt+
Block ::= indent Script dedent
Stmt ::= ClassDecl | VarDecl | Call | ForStmt | DoStmt | WhileStmt | IfStmt | FuncDec | PrintStmt | PromptStmt
ClassDecl ::= 'class' ID indent
MemberDecl ::= Access Type ID
Access ::= Private | Public
Type ::= 'void' | 'int' | 'double' | 'string' | 'bool' | 'func'
VarDecl ::= Type ID ( ',' ID)* ( AssOp Exp)?
Call ::= ID '(' ( Exp ( ',' Exp)*)? ')' 
ForStmt ::= 'for' AssmtStmt 'while' Exp ':' Stmt
DoStmt ::= 'do' Block WhileStmt
WhileStmt ::= 'while' Exp
IfStmt ::= 'if' Exp
ElseStmt ::= 'else' Exp
AssmtStmt ::= ID AssOp Exp
FuncDec ::= Type Call Block
PrintStmt ::= 'print' Exp
PromptStmt ::= 'prompt' Exp

Exp ::= Exp1 (','Exp1)*
Exp1 ::= Exp2 (RelOp Exp2)*
Exp2 ::= Exp3 (MulOp Exp3)*
Exp3 ::= Exp4 (AddOp Exp4)*
Exp4 ::= (PrefixOp)? Exp5
Exp5 ::= Exp6 (PostfixOp)?
Exp6 ::= (Exp7? '::')? Exp7?
Exp7 ::= ClassDecl | MemberDecl | Access | Type | ID | VarDecl | Call

keyword ::='return'|'print'|'prompt'|'args'|'if'|'else'|'elseif'|'for'|'while'|'until'|'class'|'public'|'private'|'header'
type ::= 'void'|'int'|'double'|'string'|'bool'|'func'
id ::=[A-Za-z][A-Za-z0-9_]*
string::=[“]([\\][“\\bfnrt])*[“]
int ::=[0-9]+
double::=int '.' int
bool ::=true|false
scope::= '::'
swap ::= ':=:'
assop ::= '=='|'='|'+='|'-='|'/='|'*='|'%='
addop ::= '+'|'-'|'++'|'--'
multop ::=  '*'|'|%'|'**'
relop ::= '>'|'<'|'<='|'>='|'&'|'&&'|'!='|'|'|'||'
indent ::= [\t]|[\s{4}]